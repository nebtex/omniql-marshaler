// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package marshaller

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.marshaller
)

func easyjsonD31a5a85DecodeGithubComNebtexOmniqlmarshallerGomarshaller(in *jlexer.Lexer, out *DecodeError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "hybrid_type":
			out.HybridType = string(in.String())
		case "omniql_type":
			out.OmniqlType = string(in.String())
		case "omniql_items":
			out.OmniqlItems = string(in.String())
		case "application":
			out.Application = string(in.String())
		case "error":
			out.ErrorMsg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComNebtexOmniqlmarshallerGomarshaller(out *jwriter.Writer, in DecodeError) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"path\":")
		out.String(string(in.Path))
	}
	if in.HybridType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hybrid_type\":")
		out.String(string(in.HybridType))
	}
	if in.OmniqlType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"omniql_type\":")
		out.String(string(in.OmniqlType))
	}
	if in.OmniqlItems != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"omniql_items\":")
		out.String(string(in.OmniqlItems))
	}
	if in.Application != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"application\":")
		out.String(string(in.Application))
	}
	if in.ErrorMsg != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error\":")
		out.String(string(in.ErrorMsg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.marshaller interface
func (v DecodeError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD31a5a85EncodeGithubComNebtexOmniqlmarshallerGomarshaller(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.marshaller interface
func (v DecodeError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComNebtexOmniqlmarshallerGomarshaller(w, v)
}

// UnmarshalJSON supports json.Unmarshaller interface
func (v *DecodeError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD31a5a85DecodeGithubComNebtexOmniqlmarshallerGomarshaller(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaller interface
func (v *DecodeError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComNebtexOmniqlmarshallerGomarshaller(l, v)
}
